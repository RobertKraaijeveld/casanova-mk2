module CasanovaRTS

open "UnityEngine.dll"
open UnityEngine

open "WrappedEntities.dll"
open WrappedEntities


worldEntity World =
  {
    StarSystems           : [StarSystem]
    Links                 : [Link]
    Players               : [Player]
    CurrentSelection      : CurrentSelection
        
    Create() =
      let current_selection = CurrentSelection.Create()
      let players =
        [Player.Create("Gius", Color.red);
         Player.Create("Mudy", Color.blue)]
      
      let star_systems = GameObject.Find("StarSystems") 
      let star_systems = star_systems.transform
      let star_systems = 
        [ for i in [0 .. star_systems.childCount-1] do
          let star_system = star_systems.GetChild(i)
          select (StarSystem.Create(current_selection, star_system, players)) ]
      let all_checkpoints = 
        [
          for star_system in star_systems do
          let checkpoints = 
            [
              for star in star_system.Stars do
              select star.Checkpoint
            ] @
            [
              for planet in star_system.Planets do
              select planet.Checkpoint
            ]
          for checkpoint in checkpoints do
          select checkpoint
        ]
      let links = GameObject.Find("Links")
      let links = links.transform
      let links = 
        [ for i in [0 .. links.childCount-1] do
          let link = links.GetChild(i)
          let Unity_link = new UnityLink() //link.gameObject
          let beginning = 
            [ for checkpoint in all_checkpoints do
              findBy (checkpoint.UnityCheckpoint.GameObject = Unity_link.BeginningGameObject) ]
          let ending = 
            [ for checkpoint in all_checkpoints do
              findBy (checkpoint.UnityCheckpoint.GameObject = Unity_link.EndGameObject) ]
          select (Link.Create(link, beginning, ending)) ]
      {
        StarSystems       = star_systems
        Links             = links
        Players           = players
        CurrentSelection  = current_selection
      }
  }

entity CurrentSelection =
  {
    ref LastLeftSelected  : Option<Checkpoint>

    Create() =
      {
        LastLeftSelected  = None
      }
  }

entity Player = 
  {
    Name  : string
    Color : Color

    Create(name : string, color : Color) =
      {
        Name    = name
        Color   = color
      }
  }

entity Link = 
  {
    ref UnityLink   : UnityLink
    StartToEnd        : DirectedLink
    EndToStart        : DirectedLink
    LinkBonuses       : LinkBonuses

    rule UnityLink.StartToEndEnabled =
      wait StartToEnd.AutoSendEnabled
      yield true

    rule UnityLink.EndToStartEnabled =
      wait EndToStart.AutoSendEnabled
      yield true

    rule UnityLink.StartToEndEnabled =
      wait not StartToEnd.AutoSendEnabled
      yield false

    rule UnityLink.EndToStartEnabled =
      wait not EndToStart.AutoSendEnabled
      yield false

    Create(transform:Transform, s : Checkpoint, e : Checkpoint) = 
      let start_to_end = DirectedLink.Create(transform,s,e)
      let end_to_start = DirectedLink.Create(transform,e,s)
      let owner = 
        if start_to_end.Start.Owner <> end_to_start.Start.Owner then None 
        else start_to_end.Start.Owner
      {
        UnityLink = new UnityLink() //Create(transform.gameObject)
        StartToEnd  = start_to_end
        EndToStart  = end_to_start
        LinkBonuses = LinkBonuses.Create (owner)
      }
  }
entity LinkBonuses =
  {
    BonusTransferVelocity : int
    Owner : Option<Player>

    rule BonusTransferVelocity =
      wait Owner <> None 
      let storic_owner = Owner
      for i in [0..60] do
        if storic_owner = Owner then
          wait 1.0f
      if storic_owner = Owner then
        let bonus_transfer_velocity = 
          if (BonusTransferVelocity = 3) then BonusTransferVelocity 
          else BonusTransferVelocity + 1
        yield bonus_transfer_velocity + 1
      else
        yield 1

    Create (owner : Option<Player>) = 
      {
        BonusTransferVelocity = 1
        Owner = owner
      }
  }

entity DirectedLink = 
  {
    ref UnityLink     : UnityLink
    ref Start         : Checkpoint
    ref End           : Checkpoint
    Fleets            : [TravelingFleet]
    ArrivedFleets     : [TravelingFleet]
    AutoSendEnabled   : bool
    
    rule End.RightSelected, AutoSendEnabled =
      wait Start.LeftSelected && End.RightSelected
      yield false, not AutoSendEnabled

    rule AutoSendEnabled = 
      let owner = Start.Owner
      wait Start.Owner <> owner
      yield false

    rule Fleets,Start.LocalFleet.NumShips =
      wait AutoSendEnabled && Start.LocalFleet.NumShips > 0 && Start.Owner <> None
      let sent_fleets = if (Start.LocalFleet.NumShips / 5) > 1 then (Start.LocalFleet.NumShips / 5) else 1
      yield TravelingFleet.Create(Start.UnityCheckpoint.Position,End,sent_fleets,Start.Owner.Value) :: Fleets, Start.LocalFleet.NumShips - sent_fleets
      wait 0.1f

    rule ArrivedFleets =  
      [ for f in Fleets do
        where f.Arrived
        select f ]

    rule Fleets = 
      [ for f in Fleets do
        where [for e in ArrivedFleets do
               for_all (e <> f)]
        select f ]

    rule End.LocalFleet.NumShips =
      let arrived_fleets =
        [ for f in ArrivedFleets do
          where (Some f.Owner = End.Owner)
          select f.Fleet.NumShips
          sum ]
      End.LocalFleet.NumShips + arrived_fleets

    rule End.Attackers =
        End.Attackers @
        End.Attackers @
        [ for f in ArrivedFleets do
          where (Some f.Owner <> End.Owner)
          select (AttackingFleet.Create(f.Fleet.NumShips,f.Owner)) ]
    
    Create(transform:Transform, s : Checkpoint, e : Checkpoint) = 
      {
        UnityLink = new UnityLink() //(transform.gameObject)
        Start  = s
        End    = e
        Fleets = Query<TravelingFleet>.Empty
        ArrivedFleets = Query<TravelingFleet>.Empty
        AutoSendEnabled = false
      }
  }

entity Fleet = 
  {
    NumShips    : int
    Create(num_ships : int) = 
      {
        NumShips = num_ships
      }      
  }

entity AttackingFleet =
  {
    Fleet     : Fleet
    Owner     : Player

    Create(num_ships : int, owner : Player) = 
      {
        Fleet     = Fleet.Create(num_ships)
        Owner     = owner
      }
  }

entity TravelingFleet =
  {
    UnityShip   : UnityShip
    Fleet         : Fleet
    Owner         : Player
    ref Target    : Checkpoint
    Arrived       : bool

    //rule UnityShip.Velocity = 
     // wait not Arrived
     // yield Vector3.Normalize(Target.UnityCheckpoint.Position - UnityShip.Position) * 20.0f

   // rule Arrived = 
    //  Vector3.Distance(UnityShip.Position, Target.UnityCheckpoint.Position) <= Target.UnityCheckpoint.Radius + UnityShip.Radius

    rule UnityShip.Destroyed =
      wait Arrived
      yield true
      
      //Start.UnityCheckpoint.Position,End,sent_fleets,Start.Owner.Value
    
    Create(position : Vector3, target:Checkpoint, num_ships : int, owner : Player) = 
      let Unity_ship = new UnityShip()
      {
        UnityShip   = Unity_ship
        Fleet         = Fleet.Create(num_ships)
        Owner         = owner
        Target        = target
        Arrived       = false
      }
  }

entity Star = 
  {
    Checkpoint          : Checkpoint
    ChangedOwner        : bool 
    OwnershipTime       : float32
    ProductionVelocity  : int

    rule OwnershipTime =
      wait ChangedOwner
      yield 0.0f

    rule OwnershipTime =
      wait not ChangedOwner
      yield OwnershipTime // + dt

    rule ProductionVelocity = 
      wait OwnershipTime < 5.0f
      yield 1

    rule ProductionVelocity = 
      wait OwnershipTime >= 5.0f
      yield 2

    rule ProductionVelocity = 
      wait OwnershipTime >= 10.0f
      yield 3

    rule ProductionVelocity = 
      wait OwnershipTime >= 20.0f
      yield 4

    rule ChangedOwner = 
      wait Checkpoint.Owner <> None
      let previous_owner = Checkpoint.Owner
      wait previous_owner <> Checkpoint.Owner
      yield true
      yield false

    rule Checkpoint.LocalFleet.NumShips =
      wait Checkpoint.Owner <> None
      wait 1.0f
      yield Checkpoint.LocalFleet.NumShips + ProductionVelocity

    rule Checkpoint.UnityCheckpoint.ProductionLevel = ProductionVelocity

    Create(current_selection : CurrentSelection, unity_checkpoint : UnityCheckpoint, ownership : Ownership, owner : Option<Player>) =
      {
        Checkpoint          = Checkpoint.Create(current_selection, unity_checkpoint, ownership, owner)
        ChangedOwner        = false
        OwnershipTime       = 0.0f
        ProductionVelocity  = 1
      }
  }

entity Planet = 
  {
    Checkpoint    : Checkpoint
    Create(current_selection : CurrentSelection, 
           unity_checkpoint : UnityCheckpoint, 
           ownership : Ownership, 
           owner :  Option<Player>) =
      {
        Checkpoint = Checkpoint.Create(current_selection, unity_checkpoint, ownership, owner)
      }
  }

entity Checkpoint =
  {
    UnityCheckpoint       : UnityCheckpoint
    Owner                 : Option<Player>
    LocalFleet            : Fleet
    Attackers             : [AttackingFleet]
    ref CurrentSelection  : CurrentSelection
    Defense               : int
    Attack                : int
    ref SystemOwnership   : Ownership

    LeftSelected  : bool // set by Unity upon left click
    RightSelected : bool // set by Unity upon right click

    rule LocalFleet.NumShips, Defense, Attack =
      wait SystemOwnership.Owner <> None 
      wait (1 * ((100/SystemOwnership.StarsPlanetsNumber)))
      wait SystemOwnership.Owner <> None && Attackers = Query<AttackingFleet>.Empty
      let defense = if Defense < 100 then Defense + 1 else Defense
      let attack = if Attack < 100 then Attack + 1 else Attack
      yield LocalFleet.NumShips + 1, defense, attack 

    rule Defense = 
      wait Owner <> None
      let storic_owner = Owner
      wait Attackers <> Query<AttackingFleet>.Empty
      for i in [0..5] do
        if storic_owner = Owner then
          wait 1.0f
      if storic_owner = Owner && Defense < 100 then
        yield Defense + 1

    rule UnityCheckpoint.OwnerName =
      wait Owner = None
      yield ""

    rule UnityCheckpoint.NumArmies =
      wait Owner = None
      yield ""

    rule UnityCheckpoint.OwnerName, UnityCheckpoint.OwnerColor =
      wait Owner <> None
      yield Owner.Value.Name, Owner.Value.Color

    rule UnityCheckpoint.NumArmies =
      wait Owner <> None && Attackers = Query<AttackingFleet>.Empty
      yield "" //LocalFleet.NumShips.ToString()

    rule UnityCheckpoint.NumArmies =
      wait Owner <> None && Attackers <> Query<AttackingFleet>.Empty
      //let attackers =
        //List.reduce
        //  (fun a b -> a + b)
         // [for a in Attackers do
          // select a ] //(a.Fleet.NumShips.ToString() + " ")]
      yield "" //LocalFleet.NumShips.ToString() //.ToString() + "vs" + attackers

    rule UnityCheckpoint.DefenseLevel = Defense

    rule LeftSelected, UnityCheckpoint.LeftDown =
      wait UnityCheckpoint.LeftDown
      yield true, false

    rule RightSelected, UnityCheckpoint.RightDown =
      wait UnityCheckpoint.RightDown
      yield true, false
      wait 0.1f
      yield false, UnityCheckpoint.RightDown

    rule UnityCheckpoint.Scale = 
      wait not LeftSelected
      yield 1.0f
      wait LeftSelected
      yield 2.0f

    rule UnityCheckpoint.Scale = 
      wait not RightSelected
      yield 1.0f
      wait RightSelected
      yield 0.5f

    rule CurrentSelection.LastLeftSelected =
      wait CurrentSelection.LastLeftSelected = None && LeftSelected 
      yield Some this

    rule CurrentSelection.LastLeftSelected.Value.LeftSelected,CurrentSelection.LastLeftSelected =
      wait CurrentSelection.LastLeftSelected <> None && CurrentSelection.LastLeftSelected.Value <> this && LeftSelected
      yield false,Some this
          
    rule LocalFleet.NumShips, Attackers =
      wait Attackers <> Query<AttackingFleet>.Empty
      let num_attackers = Attackers.Count
      wait 0.1f
      yield LocalFleet.NumShips - num_attackers,
            [for a in Attackers do
             select (AttackingFleet.Create(a.Fleet.NumShips - 1, a.Owner )) ]
    
    rule Attackers =
      [ for a in Attackers do
        where (a.Fleet.NumShips > 0)
        select a ] 
    
    rule LocalFleet, Owner, Attackers =
      wait LocalFleet.NumShips <= 0 && Attackers <> Query<AttackingFleet>.Empty
      let newOwnersAttackers = 
            [ for a in Attackers do
              where (a.Owner = Attackers.Head.Owner)
              select a ]

  
      yield (Fleet.Create([ for a in newOwnersAttackers do
                             select a.Fleet.NumShips
                             sum ])), 
            (Some (Attackers.Head.Owner)),
            ([for f in Attackers do
               where [for oa in newOwnersAttackers do
                      for_all (oa <> f)]
               select f ])

    Create(current_selection : CurrentSelection, unity_checkpoint : UnityCheckpoint, ownership : Ownership, owner : Option<Player>) =
      {
        UnityCheckpoint   = unity_checkpoint
        Owner             = owner
        LocalFleet        = Fleet.Create( 0)
        Attackers         = Query<AttackingFleet>.Empty
        LeftSelected      = false
        RightSelected     = false
        CurrentSelection  = current_selection
        Defense           = 0
        Attack            = 0
        SystemOwnership = ownership
      }
  }

entity Ownership =
  {
    AllOwners : [Option<Player>]
    Owner     : Option<Player>
    StarsPlanetsNumber : int

    Create(stars_planets_number : int) =
      {
        AllOwners = Query<Option<Player>>.Empty
        Owner = None
        StarsPlanetsNumber = stars_planets_number
      }
  }


entity StarSystem = 
  {
    Stars     : [Star]
    Planets   : [Planet]
    Ownership : Ownership

    rule Ownership.Owner =
      let elems = 
          ([ for s in Stars do
             where (s.Checkpoint.Owner <> None)
             select s.Checkpoint.Owner.Value ] @
           [ for p in Planets do
             where (p.Checkpoint.Owner <> None)
             select p.Checkpoint.Owner.Value ])
      //let owners = elems //Seq.toList (Seq.map(fun (a,b) -> a) (Seq.groupBy(id, elems)))
      wait elems.Count = 1
      yield Some elems.[0]

    rule Ownership.Owner =
      let elems =
        ([ for s in Stars do
           where (s.Checkpoint.Owner <> None)
           select s.Checkpoint.Owner.Value ] @
         [ for p in Planets do
           where (p.Checkpoint.Owner <> None)
           select p.Checkpoint.Owner.Value ])
      let owners = elems //Seq.toList (Seq.map(fun (a,b) -> a) (Seq.groupBy(id, elems)))
      wait owners.Count <> 1
      yield None

    rule Ownership.AllOwners =
      let elems = 
        ([for s in Stars do
          where (s.Checkpoint.Owner <> None)
          select (Some s.Checkpoint.Owner.Value)] @
         [for p in Planets do
          where (p.Checkpoint.Owner <> None)
          select (Some p.Checkpoint.Owner.Value)]) 
      let owners = elems // Seq.toList (Seq.map(fun (a,b) -> a) (Seq.groupBy(id, elems)))
      yield owners

    Create(current_selection : CurrentSelection, star_system:Transform, players : List<Player>) = 
      let stars = star_system.FindChild("Stars")
      let planets = star_system.FindChild("Planets")
      let ownership = Ownership.Create (stars.childCount-1 + planets.childCount-1)
      let stars = 
         [
          for j in [0 .. stars.childCount-1] do
          let star = stars.GetChild(j)
          let star = star.gameObject
          let star = new UnityCheckpoint()
          let starting_owner = 
            if star.StartingOwner >= 0 && star.StartingOwner < players.Count then
              Some players.[star.StartingOwner]
            else
              None
          select (Star.Create(current_selection, star, ownership, starting_owner)) 
         ]
      let planets = 
        [
          for j in [0 .. planets.childCount-1] do
          let planet = planets.GetChild(j)
          let planet = planet.gameObject
          let planet = new UnityCheckpoint()
          let starting_owner = 
            if planet.StartingOwner >= 0 && planet.StartingOwner < players.Count then
              Some players.[planet.StartingOwner]
            else
              None
          select (Planet.Create(current_selection, planet, ownership, starting_owner))
        ]
      {
        Stars   = stars
        Planets = planets
        Ownership = ownership
      }
  }

