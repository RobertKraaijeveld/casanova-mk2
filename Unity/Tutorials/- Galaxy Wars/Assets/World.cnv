module Game

open "UnityEngine.dll"
open UnityEngine

worldEntity World = {
  Links : [Link]
  Planets : [Planet]
  Players : [Player]

  Create() =
    let unity_planets = UnityPlanet.FindAll()

    let players = 
      [for p in UnityPlayer.FindAll() do
       select (new Player(p.Name, new GameStatistic(1.0f,1.0f,1.0f,1.0f)))]

    let planets = 
      [for unity_planet in unity_planets do
       let owner =
        [for player in players do
         where (unity_planet.InitialOwnerName = player.Name && not (unity_planet.InitialOwnerName = ""))
         select player]
       let owner = 
          if owner.Count > 0 then Some owner.Head
          else None
       select (new Planet(unity_planet, new GameStatistic(1.0f,1.0f,1.0f,1.0f), owner))]

    let unity_links = UnityLine.FindAll()
     
    let links1 = 
      [for unity_link in unity_links do
       for source in planets do
       for destination in planets do
       where (unity_link.f = source.UnityPlanet.gameObject && unity_link.t = destination.UnityPlanet.gameObject)
       select (new Link(unity_link, source, destination))]

    let links2 = 
      [for unity_link in unity_links do
       for source in planets do
       for destination in planets do
       where (unity_link.f = source.UnityPlanet.gameObject && unity_link.t = destination.UnityPlanet.gameObject)
       select (new Link(unity_link, destination, source))]    
    { 
      Planets = planets
      Links = links1 @ links2
      Players = players
    }
}

entity Battle = {
  ref MySource    : Planet
  AttackingFleets : [AttackingFleet]
  DefenceLost     : Option<int>
  AttackLost      : Option<int>
  FleetsToDestroyNextTurn  : [AttackingFleet]
  FleetsToMerge   : [AttackingFleetToMerge]

  rule AttackLost, DefenceLost =
    yield None, None
    wait 1.0f
    if AttackingFleets.Count > 0 then
      yield Some 1, Some 1   

  rule AttackingFleets =
    .| AttackingFleets.Count <= 1 => yield AttackingFleets
    .| _ =>
      wait Random.Range(1.0f, 2.0f)
      yield AttackingFleets.Tail @ [AttackingFleets.Head]
  

  rule AttackingFleets =
    let new_attacking_fleets =
      [for f in MySource.InboundFleets do
       let is_ship_to_merge =
        [for flee_to_merge in FleetsToMerge do
         where (flee_to_merge.MyFleet = f)
         select 1
         sum]
       where (is_ship_to_merge = 0 &&
              (MySource.Owner.IsNone ||
               not (f.Owner = MySource.Owner.Value)))
       select (new AttackingFleet(f, this))]

    let filtered_attacking_fleets =
      [for f in AttackingFleets do       
       where ((not f.MyFleet.Destroyed) &&
              (MySource.Owner.IsSome && not (f.MyFleet.Owner = MySource.Owner.Value)))
       select f]
    yield new_attacking_fleets @ filtered_attacking_fleets 

  rule FleetsToDestroyNextTurn =
    yield 
      [for f in AttackingFleets do
       where (MySource.Owner.IsSome && f.MyFleet.Owner = MySource.Owner.Value)
       select f]

  rule FleetsToMerge =
    yield
      [for i_f in MySource.InboundFleets do
       for a_f in AttackingFleets do
       where (not a_f.MyFleet.Destroyed &&
              i_f.Link = a_f.MyFleet.Link)
       select (new AttackingFleetToMerge (i_f, a_f))]
     

  Create(planet : Planet) =
    {
      MySource        = planet
      AttackingFleets = []
      DefenceLost     = None
      AttackLost      = None
      FleetsToDestroyNextTurn = []
      FleetsToMerge   = []
    }
}

entity Planet = {
  inherit UnityPlanet
  Statistics    : GameStatistic
  LocalFleets   : int
  InboundFleets : [Fleet]
  ref Owner     : Option<Player>
  Battle        : Option<Battle>
  MinApproachingDist : float32
  LandingFleets : [LandingFleet] 
  
  rule Selected =
    wait Input.GetMouseButtonDown(0) && not (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.LeftControl))
    yield IsHit 

  rule RightSelected =
    wait Input.GetMouseButtonDown(0) && (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.LeftControl))
    if IsHit then 
      yield true
      yield false

  rule Info = yield Info + LocalFleets.ToString()
  rule Info = 
    if Owner.IsSome then yield Owner.Value.Name + " "
    else yield ""



  rule Owner, LocalFleets =
    if Battle.IsSome &&
       LocalFleets = 0 &&
       Battle.Value.AttackingFleets.Count > 0 then

       let new_owner = Battle.Value.AttackingFleets.Head.MyFleet.Owner
       let fleets_to_add =
        [for f in Battle.Value.AttackingFleets do
         where (f.MyFleet.Owner = new_owner && f.MyFleet.Ships > 0)
         select f.MyFleet.Ships
         sum]
       yield Some Battle.Value.AttackingFleets.Head.MyFleet.Owner, fleets_to_add 

  rule LocalFleets =
    .| Battle.IsSome && Battle.Value.DefenceLost.IsSome => yield LocalFleets - Battle.Value.DefenceLost.Value
    .| Battle.IsSome => yield LocalFleets
    .| Owner.IsNone => yield 0
    .| _ =>
      wait Random.Range(1,3)
      yield LocalFleets + 1

  rule LocalFleets =
    let fleets_to_add =
      [for f in LandingFleets do
        select f.MyFleet.Ships
        sum]
    yield LocalFleets + fleets_to_add      
  
  rule Battle =
    if (Owner.IsNone && Battle.IsNone && (not (LandingFleets.Count = InboundFleets.Count))) ||
        (Owner.IsSome && (not (LandingFleets.Count = InboundFleets.Count))) then
      yield Some (new Battle(this))
      wait Battle.Value.AttackingFleets.Count <= 0
      yield None
    else yield None

        
  rule LandingFleets =
    if Owner.IsSome then
      yield
        [for inbound_fleet in InboundFleets do
         where (inbound_fleet.Owner = Owner.Value)
         select (new LandingFleet(inbound_fleet))]
    else yield []
    

  rule InboundFleets =
    yield
      [for l in world.Links do     
       where (l.Destination = this)
       for f in l.TravellingFleets do
       where (Vector3.Distance(f.MyFleet.Position, Position) <= MinApproachingDist)
       select f.MyFleet]


  Create(up : UnityPlanet, statistics : GameStatistic, owner : Option<Player>) = 

  {
    Base = up
    MinApproachingDist = 0.5f
    LandingFleets = []
    Statistics = statistics
    LocalFleets   = 0
    InboundFleets = []
    Owner         = owner
    Battle        = None
  }
}

entity Fleet = {
  inherit UnityFleet
  Statistics  : GameStatistic
  Ships       : int
  ref Link    : Link
  ref Owner   : Player
  
  rule Info = yield Ships.ToString()
  rule Destroyed = 
    wait Ships <= 0
    yield true

  Create(statistics : GameStatistic, ships : int, owner : Player, position : Vector3, link : Link) =
    {
      Base        = UnityFleet.Instantiate(position, link.Destination.Position)
      Link        = link
      Statistics  = statistics
      Ships       = ships
      Owner       = owner
    }
}

entity AttackingFleetToMerge = {
  ref MyFleet : Fleet
  ref FleetToMergeWith : AttackingFleet
  rule MyFleet.Destroyed = yield true
  Create(fleet : Fleet, fleet_to_merge_with : AttackingFleet) = {
    MyFleet = fleet
    FleetToMergeWith = fleet_to_merge_with 
  }
}
entity AttackingFleet = {
  ref MyFleet : Fleet
  ref MyBattle : Battle

  rule MyFleet.Destroyed =
    wait (MyBattle.MySource.Owner.IsSome && MyFleet.Owner = MyBattle.MySource.Owner.Value) || MyFleet.Ships <= 0
    yield true


  rule MyFleet.Info = yield MyFleet.Ships.ToString()

  rule MyFleet.Ships =      
    yield [for f in MyBattle.FleetsToMerge do
           where (f.FleetToMergeWith = this)
           select f.MyFleet.Ships
           sum] + MyFleet.Ships 

  rule MyFleet.Ships =
    wait MyBattle.AttackLost.IsSome && MyBattle.AttackingFleets.Head = this
    yield MyFleet.Ships - MyBattle.AttackLost.Value


  Create(myFleet : Fleet, myBattle : Battle) = 
    {
      MyFleet = myFleet
      MyBattle = myBattle
    }
}

entity LandingFleet = {
  MyFleet : Fleet
  rule MyFleet.Destroyed = yield true
  Create(myFleet : Fleet) = 
    {
      MyFleet = myFleet
    }
}


entity TravellingFleet = {
  MyFleet : Fleet
  ref Destination : Planet
  Velocity : Vector3
  MaxVelocity : float32
  
  rule MyFleet.Position =
    yield MyFleet.Position + Velocity * MaxVelocity * dt

      
  Create(myfleet : Fleet, destination : Planet) = 
    let velocity = destination.Position - myfleet.Position
    let velocity_norm = velocity.normalized
    {
      MyFleet   = myfleet
      Destination = destination
      Velocity  = velocity_norm
      MaxVelocity = 1.0f
    }
}


entity Link = {
  inherit UnityLine
  ref Source        : Planet
  ref Destination   : Planet
  TravellingFleets  : [TravellingFleet]
  
  IsAutoRouteActive : bool
   
  rule IsAutoRouteActive, ActiveAutoRoute, FromPlanet = 
    wait Source.Selected &&
         Destination.RightSelected &&
         Input.GetKey(KeyCode.LeftControl)
    let autoroute_value = not IsAutoRouteActive
    yield autoroute_value, autoroute_value, Source.UnityPlanet
    wait Input.GetKeyUp(KeyCode.LeftControl)

  rule TravellingFleets, Source.LocalFleets =
    wait IsAutoRouteActive
    wait Random.Range(2.0f,3.0f)
    if Source.LocalFleets / 2 > 0 then
      let new_fleet = new Fleet(new GameStatistic(1.0f,1.0f,1.0f,1.0f), Source.LocalFleets / 2, Source.Owner.Value, Source.Position, this) 
      yield new TravellingFleet(new_fleet, Destination) :: TravellingFleets, Source.LocalFleets / 2

  rule TravellingFleets, Source.LocalFleets =
    wait Source.Selected &&
         Destination.RightSelected &&
         Source.Owner.IsSome &&
         Source.Battle.IsNone &&
         Input.GetKey(KeyCode.LeftShift) &&
         Source.LocalFleets > 0
    let new_fleet = new Fleet(new GameStatistic(1.0f,1.0f,1.0f,1.0f), Source.LocalFleets, Source.Owner.Value, Source.Position, this) 
    yield new TravellingFleet(new_fleet, Destination) :: TravellingFleets, 0

  rule TravellingFleets =
    yield 
      [for f in TravellingFleets do
       where (not f.MyFleet.Destroyed && (Vector3.Distance(f.MyFleet.Position, Destination.Position) > Destination.MinApproachingDist))
       select f]

  


  Create(ul : UnityLine, s : Planet, d : Planet) = {
    Base = ul
    Source = s
    Destination = d
    TravellingFleets = []    
    IsAutoRouteActive = false
  }
}

entity Player = {
  Name : string
  Statistics : GameStatistic
  Create(name : string, statistics : GameStatistic) =
    {
      Name = name
      Statistics = statistics
    }
}

entity GameStatistic = {
  Attack      : float32
  Defence     : float32
  Production  : float32
  Research    : float32
  Create(a : float32, d : float32, p : float32, r : float32) = 
    {
      Attack      = a
      Defence     = d
      Production  = p
      Research    = r
    }
}